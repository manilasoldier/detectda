:py:mod:`detectda.imgs`
=======================

.. py:module:: detectda.imgs


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   detectda.imgs.ImageSeries
   detectda.imgs.ImageSeriesPickle
   detectda.imgs.ImageSeriesPlus
   detectda.imgs.VidPol




.. py:exception:: HomologyError


   Bases: :py:obj:`Exception`

   Raised when homology for a given dimension is insufficient for calculating some quantity


.. py:exception:: TrivialImageError


   Bases: :py:obj:`Exception`

   Common base class for all non-exit exceptions.


.. py:class:: ImageSeries(video, polygon=None, div=1, n_jobs=None)


   Bases: :py:obj:`VidPol`

   Reads in an image series (video), either a single or multiple frames.

   May optionally specify polygonally region, held constant across frames,
   in which to select specific generators in persistent homology.

   :param video: Image series. Index on axis=0 represents the frame index, unless a single image (2d array) is provided.
   :type video: array_like
   :param polygon: Polygonal region outside of which positive cells of 0th persistent homology will be excluded.
   :type polygon: shapely.Polygon, optional, default is ``None``
   :param div: In nanoparticle imaging process, pixel intensities are often registered as something close to a(div),
               so dividing by div and rounding to nearest integer will give pixel intensities that conform more strongly
               to common parametric assumptions.
   :type div: positive int/float, optional, default is ``1``.
   :param n_jobs: The number of jobs to use for the computation. ``None`` means 1 unless
                  in a :obj:`joblib.parallel_backend` context. ``-1`` means using all
                  processors.
   :type n_jobs: int or None, optional, default is ``None``

   .. py:method:: fit(sigma=None, max_death_pixel_int=True, print_time=True)

      Fit method for ImageSeries object.

      Optional Gaussian smoothing with sigma parameter.

      The argument max_death_pixel_int controls whether or not
      the maximum death time is the largest pixel value (within an image),
      or the largest finite death time (within an image).


   .. py:method:: get_alps()

      Get ALPS statistic of each image frame from fitted object.


   .. py:method:: get_degp_totp(p=1, inf=False)

      Get degree-p total persistence of each image frame from fitted object.


   .. py:method:: get_pers_entr(neg=True)

      Get persistent entropy of each image frame from fitted object. For hypothesis testing
      purposes, the default is negative of the entropy


   .. py:method:: plot_im(frame, plot_poly=True, plot_pts=True, smooth=True, thr=None, **kwargs)

      Plot an individual frame in the video, with or without the polygonal region superimposed



.. py:class:: ImageSeriesPickle(file_path, div=1, n_jobs=None)


   Bases: :py:obj:`ImageSeries`

   Creates ImageSeries object from .pkl file. Designed for use with output of identify_polygon script.


.. py:class:: ImageSeriesPlus(video, polygon=None, div=1, n_jobs=None, im_list=False)


   Bases: :py:obj:`VidPol`

   Reads in an image series (video), either a single or multiple frames.

   May optionally specify polygonal region, held constant across frames,
   in which to select specific generators in persistent homology. Similar to ImageSeries,
   but with enhanced functionality for utilizing BOTH 0- and 1-dimensional persistent homology.

   .. py:method:: convert_to_df()

      Creates pandas DataFrames (self.dfs\_) from persistence information calculated from detectda algorithm.

      :rtype: None.


   .. py:method:: fit(sigma=None, print_time=True, verbose=0)

      Fit method for ImageSeriesPlus object.

      Optional Gaussian smoothing with sigma parameter.


   .. py:method:: get_lifetimes()

      Creates persistence lifetimes (self.lifetimes) for each persistence diagram in image series.

      :rtype: None.


   .. py:method:: get_midlife_coords()

      Creates persistence midlife coordinates (self.midlife_coords) for each persistence diagram in image series.

      :rtype: None.


   .. py:method:: get_pers_im(bts, lts, dim, bandwidth=1)

      Create persistence images from cubical persistent homology for each image in the detectda object,
      for homology dimension dim. The resulting dimension of the persistence image vectorizations is bts x lts.


      :param bts: birth-time resolution (higher = finer)
      :type bts: int
      :param lts: lifetime resolution (higher = finer).
      :type lts: int
      :param bandwidth: Positive number corresponding to Gaussian kernel bandwidth (i.e. variance)
      :type bandwidth: float
      :param dim: Integer 0 or 1 corresponds to thresholding only based on dimension 0 and 1 persistence features.
      :type dim: int

      :rtype: None.


   .. py:method:: get_pers_mag()

      Creates persistence magnitudes (self.pers_mag) for each persistence diagram in image series.

      :rtype: None.


   .. py:method:: get_pers_stats()

      Get persistence statistics for each image, according to `Topological approaches to skin disease analysis`, along with
          persistent entropy and ALPS statistics, constituting an embedding into 36-dimensional Euclidean space.


   .. py:method:: pd_threshold(minv, maxv, dim='both')

      :param minv: Minimum threshold to consider.
      :type minv: float
      :param maxv: Maximum threshold to consider.
      :type maxv: float
      :param dim: Integer 0 or 1 corresponds to thresholding only based on dimension 0 and 1 persistence features.
                  The default is "both", corresponding to both dimensions 0 and 1.
      :type dim: str or int, optional

      :raises HomologyError: Error raised due to lack of sufficient homology to perform PD thresholding.

      :returns: **ims_t** -- Binary, thresholded images.
      :rtype: list of ndarray.


   .. py:method:: plot_im(frame, dim=0, plot_poly=True, plot_pts=True, smooth=True, thr=None, **kwargs)

      Plot an individual frame in the video, with or without the polygonal region superimposed



.. py:class:: VidPol(video, polygon=None, div=1, n_jobs=None)


   Superclass for ImageSeries and ImageSeriesPlus classes


